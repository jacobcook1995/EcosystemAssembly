# A script that tests the robustness of the communities generated by form_comm.jl by
# generating communites under different parametrisations
using Assembly
using JLD

# Function to assemble specfic communities
function rb_assemble()
    # Check that sufficent arguments have been provided
    if length(ARGS) < 7
        error("Insufficent inputs provided")
    end
    # Preallocate the variables I want to extract from the input
    Rl = 0
    Ru = 0
    N = 0
    rps = 0
    syn = false
    en = ARGS[6]
    opt = 0
    # Check that all arguments can be converted to integers
    try
        Rl = parse(Int64,ARGS[1])
        Ru = parse(Int64,ARGS[2])
        N = parse(Int64,ARGS[3])
        rps = parse(Int64,ARGS[4])
        syn = parse(Bool,ARGS[5])
        opt = parse(Int64,ARGS[7])
    catch e
            error("need to provide 5 integers and a bool")
    end
    # Starting run assumed to be 1
    Rs = 1
    # Check if run to start from has been provided
    if length(ARGS) > 7
        # Check this argument is an integer
        try
            Rs = parse(Int64,ARGS[8])
        catch e
            error("intial run number must be integer")
        end
    end
    # Check that simulation type is valid
    if Rl < 1
        error("lower bound on the number of reactions must be greater than 1")
    end
    # Check that simulation type is valid
    if Ru < Rl
        error("upper bound on the number of reactions can't be smaller than the lower")
    end
    # Check that number of strains is greater than 0
    if N < 1
        error("number of strains should be greater than zero")
    end
    # Check that number of strains is greater than 0
    if rps < 1
        error("need to do at least 1 simulation")
    end
    if Rs > rps
        error("starting run can't be higher than final run")
    end
    # Check one of two valid energy options has been provided
    if en != "l" && en != "h"
        error("must select high (h) or low (l) energy supply")
    end
    # Check that a valid option has been provided
    if opt < 1 || opt > 6
        error("only 6 options to choose between")
    end
    println("Reaction range = $(Rl)-$(Ru)")
    println("Syntrophy on = $(syn)")
    # Now start actual script
    println("Compiled and input read in!")
    flush(stdout)
    # Assume that half saturation occurs at a quarter κ/δ
    KS = (1/4)*5.5e-3
    # Arbitary number that seems to give decent survival
    kc = 10.0
    # The reversibility factor remains the same as previously
    kr = 10.0
    # Assume microbes have 3 reactions each
    # Case of 8 metabolites
    M = 25
    # Use formula to find how many reactions this implies
    O = 2*M - 3
    # Set time long enough for dynamics to equilbrate
    Tmax = 1e8
    # Initial ribosome fraction is taken from my ATP fits
    ϕR0 = 0.128
    # Fairly arbitary inital conditions
    pop = ones(N)
    conc = zeros(M)
    as = 1e5*ones(N)
    ϕs = ϕR0*ones(N)
    # Choose free energy range based on en value
    if en == "h"
        μrange = 1.5e7*(M/25)
    else
        μrange = 1.5e6*(M/25)
    end
    # Find title of option
    title_op = options_titles(opt)
    # Check if directory exists and if not make it
    if ~isdir("Paras/$(title_op)")
        mkdir("Paras/$(title_op)")
    end
    # Check if sub-directory exists and if not make it
    if ~isdir("Paras/$(title_op)/$(Rl)-$(Ru)$(syn)$(en)")
        mkdir("Paras/$(title_op)/$(Rl)-$(Ru)$(syn)$(en)")
    end
    # And the same check for the Output
    if ~isdir("Data/$(title_op)")
        mkdir("Data/$(title_op)")
    end
    # Check if sub-directory exists and if not make it
    if ~isdir("Data/$(title_op)/$(Rl)-$(Ru)$(syn)$(en)")
        mkdir("Data/$(title_op)/$(Rl)-$(Ru)$(syn)$(en)")
    end
    # Now loop over the number of repeats
    for i = Rs:rps
        # Print that the new run has been started
        println("Run $i started!")
        flush(stdout)
        # Make parameter set based on option
        if opt == 1
            # Option 1 changes the average mass of the metabolic protein
            np = 600
            ps = initialise_np(N,M,O,Rl,Ru,kc,KS,kr,syn,μrange,np)
        elseif opt == 2
            # Option 2 changes the average bound fraction of ribosomes
            Pb = 0.9
            ps = initialise_Pb(N,M,O,Rl,Ru,kc,KS,kr,syn,μrange,Pb)
        elseif opt == 3
            # Option 3 changes the size of the houskeeping fraction
            ϕH = 0.7
            ps = initialise_ϕH(N,M,O,Rl,Ru,kc,KS,kr,syn,μrange,ϕH)
        elseif opt == 4
            # Option 4 makes Kγ bigger than KΩ
            Kγ = 1e9
            KΩ = 5e8
            ps = initialise_sat(N,M,O,Rl,Ru,kc,KS,kr,syn,μrange,Kγ,KΩ)
        elseif opt == 5
            # Option 5 makes Kγ and KΩ both bigger
            Kγ = 5e9
            KΩ = 1e10
            ps = initialise_sat(N,M,O,Rl,Ru,kc,KS,kr,syn,μrange,Kγ,KΩ)
        else
            # Option 6 makes Kγ and KΩ both smaller
            Kγ = 5e7
            KΩ = 1e8
            ps = initialise_sat(N,M,O,Rl,Ru,kc,KS,kr,syn,μrange,Kγ,KΩ)
        end
        # Before running the parameter sets should be saved so that if they crash
        # they can be rerun and hopefully track down where they went wrong
        jldopen("Paras/$(title_op)/$(Rl)-$(Ru)$(syn)$(en)/ParasReacs$(Rl)-$(Ru)Syn$(syn)Run$(i)Ns$(N).jld","w") do file
            write(file,"ps",ps)
        end
        # Find starting time
        ti = time()
        # Then run the simulation
        C, T = full_simulate(ps,Tmax,pop,conc,as,ϕs)
        # And then print time elapsed
        tf = time()
        println("Time elapsed on run $i: $(tf-ti) s")
        flush(stdout)
        # Establish which microbes are extinct (below e-10 threshold)
        ext = (C[end,1:N] .<= 1e-10)
        # Preallocate vector to store extinct microbes
        ded = Array{MicrobeP,1}(undef,sum(ext))
        # Loop over and store microbes in the vector
        k = 0
        for j = 1:length(ext)
            if ext[j] == 1
                k += 1
                ded[k] = ps.mics[j]
            end
        end
        # Remove extinct strains from parameter set
        ps = extinction(ps,ext)
        # Preallocate final concentrations (etc) for output
        out = Array{Float64,1}(undef,3*ps.N+M)
        # Store final metabolite concentrations
        out[ps.N+1:ps.N+M] = C[end,N+1:N+M]
        # Now sub in data for not extinct microbes
        k = 0
        for j = 1:length(ext)
            if ext[j] != 1
                k += 1
                # Population
                out[k] = C[end,j]
                # Energy
                out[M+ps.N+k] = C[end,M+N+j]
                # Fraction
                out[M+2*ps.N+k] = C[end,M+2*N+j]
            end
        end
        # Save extinct strains
        jldopen("Data/$(title_op)/$(Rl)-$(Ru)$(syn)$(en)/ExtinctReacs$(Rl)-$(Ru)Syn$(syn)Run$(i)Ns$(N).jld","w") do file
            write(file,"ded",ded)
        end
        # the reduced parameter sets
        jldopen("Paras/$(title_op)/$(Rl)-$(Ru)$(syn)$(en)/ParasReacs$(Rl)-$(Ru)Syn$(syn)Run$(i)Ns$(N).jld","w") do file
            write(file,"ps",ps)
        end
        # and the full output
        jldopen("Data/$(title_op)/$(Rl)-$(Ru)$(syn)$(en)/OutputReacs$(Rl)-$(Ru)Syn$(syn)Run$(i)Ns$(N).jld","w") do file
            # Save final output
            write(file,"out",out)
            # # Save time data and dynamics data
            write(file,"T",T)
            write(file,"C",C[1:end,1:end])
        end
        # Print to show that run has been successfully completed
        println("Run $i completed and saved!")
        flush(stdout)
    end
    return(nothing)
end

@time rb_assemble()
